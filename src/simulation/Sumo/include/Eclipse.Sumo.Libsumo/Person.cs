//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Eclipse.Sumo.Libsumo {

public class Person : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Person(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Person obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Person obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Person() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libsumoPINVOKE.delete_Person(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static double getSpeed(string personID) {
    double ret = libsumoPINVOKE.Person_getSpeed(personID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIPosition getPosition(string personID, bool includeZ) {
    TraCIPosition ret = new TraCIPosition(libsumoPINVOKE.Person_getPosition__SWIG_0(personID, includeZ), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIPosition getPosition(string personID) {
    TraCIPosition ret = new TraCIPosition(libsumoPINVOKE.Person_getPosition__SWIG_1(personID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIPosition getPosition3D(string personID) {
    TraCIPosition ret = new TraCIPosition(libsumoPINVOKE.Person_getPosition3D(personID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getRoadID(string personID) {
    string ret = libsumoPINVOKE.Person_getRoadID(personID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getLaneID(string personID) {
    string ret = libsumoPINVOKE.Person_getLaneID(personID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getTypeID(string personID) {
    string ret = libsumoPINVOKE.Person_getTypeID(personID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getWaitingTime(string personID) {
    double ret = libsumoPINVOKE.Person_getWaitingTime(personID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getNextEdge(string personID) {
    string ret = libsumoPINVOKE.Person_getNextEdge(personID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getVehicle(string personID) {
    string ret = libsumoPINVOKE.Person_getVehicle(personID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getRemainingStages(string personID) {
    int ret = libsumoPINVOKE.Person_getRemainingStages(personID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIStage getStage(string personID, int nextStageIndex) {
    TraCIStage ret = new TraCIStage(libsumoPINVOKE.Person_getStage__SWIG_0(personID, nextStageIndex), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIStage getStage(string personID) {
    TraCIStage ret = new TraCIStage(libsumoPINVOKE.Person_getStage__SWIG_1(personID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getEdges(string personID, int nextStageIndex) {
    StringVector ret = new StringVector(libsumoPINVOKE.Person_getEdges__SWIG_0(personID, nextStageIndex), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getEdges(string personID) {
    StringVector ret = new StringVector(libsumoPINVOKE.Person_getEdges__SWIG_1(personID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getAngle(string personID) {
    double ret = libsumoPINVOKE.Person_getAngle(personID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getSlope(string personID) {
    double ret = libsumoPINVOKE.Person_getSlope(personID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getLanePosition(string personID) {
    double ret = libsumoPINVOKE.Person_getLanePosition(personID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getWalkingDistance(string personID, string edgeID, double pos, int laneIndex) {
    double ret = libsumoPINVOKE.Person_getWalkingDistance__SWIG_0(personID, edgeID, pos, laneIndex);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getWalkingDistance(string personID, string edgeID, double pos) {
    double ret = libsumoPINVOKE.Person_getWalkingDistance__SWIG_1(personID, edgeID, pos);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getWalkingDistance2D(string personID, double x, double y) {
    double ret = libsumoPINVOKE.Person_getWalkingDistance2D(personID, x, y);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIReservationVector getTaxiReservations(int onlyNew) {
    TraCIReservationVector ret = new TraCIReservationVector(libsumoPINVOKE.Person_getTaxiReservations__SWIG_0(onlyNew), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIReservationVector getTaxiReservations() {
    TraCIReservationVector ret = new TraCIReservationVector(libsumoPINVOKE.Person_getTaxiReservations__SWIG_1(), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string splitTaxiReservation(string reservationID, StringVector personIDs) {
    string ret = libsumoPINVOKE.Person_splitTaxiReservation(reservationID, StringVector.getCPtr(personIDs));
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getIDList() {
    StringVector ret = new StringVector(libsumoPINVOKE.Person_getIDList(), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getIDCount() {
    int ret = libsumoPINVOKE.Person_getIDCount();
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getParameter(string objectID, string key) {
    string ret = libsumoPINVOKE.Person_getParameter(objectID, key);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringStringPair getParameterWithKey(string objectID, string key) {
    StringStringPair ret = new StringStringPair(libsumoPINVOKE.Person_getParameterWithKey(objectID, key), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setParameter(string objectID, string key, string value) {
    libsumoPINVOKE.Person_setParameter(objectID, key, value);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double getLength(string typeID) {
    double ret = libsumoPINVOKE.Person_getLength(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getMaxSpeed(string typeID) {
    double ret = libsumoPINVOKE.Person_getMaxSpeed(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getVehicleClass(string typeID) {
    string ret = libsumoPINVOKE.Person_getVehicleClass(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getSpeedFactor(string typeID) {
    double ret = libsumoPINVOKE.Person_getSpeedFactor(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getAccel(string typeID) {
    double ret = libsumoPINVOKE.Person_getAccel(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getDecel(string typeID) {
    double ret = libsumoPINVOKE.Person_getDecel(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getEmergencyDecel(string typeID) {
    double ret = libsumoPINVOKE.Person_getEmergencyDecel(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getApparentDecel(string typeID) {
    double ret = libsumoPINVOKE.Person_getApparentDecel(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getImperfection(string typeID) {
    double ret = libsumoPINVOKE.Person_getImperfection(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getTau(string typeID) {
    double ret = libsumoPINVOKE.Person_getTau(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getEmissionClass(string typeID) {
    string ret = libsumoPINVOKE.Person_getEmissionClass(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getShapeClass(string typeID) {
    string ret = libsumoPINVOKE.Person_getShapeClass(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getMinGap(string typeID) {
    double ret = libsumoPINVOKE.Person_getMinGap(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getWidth(string typeID) {
    double ret = libsumoPINVOKE.Person_getWidth(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getHeight(string typeID) {
    double ret = libsumoPINVOKE.Person_getHeight(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getMass(string typeID) {
    double ret = libsumoPINVOKE.Person_getMass(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIColor getColor(string typeID) {
    TraCIColor ret = new TraCIColor(libsumoPINVOKE.Person_getColor(typeID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getMinGapLat(string typeID) {
    double ret = libsumoPINVOKE.Person_getMinGapLat(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getMaxSpeedLat(string typeID) {
    double ret = libsumoPINVOKE.Person_getMaxSpeedLat(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getLateralAlignment(string typeID) {
    string ret = libsumoPINVOKE.Person_getLateralAlignment(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getPersonCapacity(string typeID) {
    int ret = libsumoPINVOKE.Person_getPersonCapacity(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getActionStepLength(string typeID) {
    double ret = libsumoPINVOKE.Person_getActionStepLength(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getSpeedDeviation(string typeID) {
    double ret = libsumoPINVOKE.Person_getSpeedDeviation(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getBoardingDuration(string typeID) {
    double ret = libsumoPINVOKE.Person_getBoardingDuration(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getImpatience(string typeID) {
    double ret = libsumoPINVOKE.Person_getImpatience(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void add(string personID, string edgeID, double pos, double depart, string typeID) {
    libsumoPINVOKE.Person_add__SWIG_0(personID, edgeID, pos, depart, typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void add(string personID, string edgeID, double pos, double depart) {
    libsumoPINVOKE.Person_add__SWIG_1(personID, edgeID, pos, depart);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void add(string personID, string edgeID, double pos) {
    libsumoPINVOKE.Person_add__SWIG_2(personID, edgeID, pos);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void appendStage(string personID, TraCIStage stage) {
    libsumoPINVOKE.Person_appendStage(personID, TraCIStage.getCPtr(stage));
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void replaceStage(string personID, int stageIndex, TraCIStage stage) {
    libsumoPINVOKE.Person_replaceStage(personID, stageIndex, TraCIStage.getCPtr(stage));
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void appendWaitingStage(string personID, double duration, string description, string stopID) {
    libsumoPINVOKE.Person_appendWaitingStage__SWIG_0(personID, duration, description, stopID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void appendWaitingStage(string personID, double duration, string description) {
    libsumoPINVOKE.Person_appendWaitingStage__SWIG_1(personID, duration, description);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void appendWaitingStage(string personID, double duration) {
    libsumoPINVOKE.Person_appendWaitingStage__SWIG_2(personID, duration);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void appendWalkingStage(string personID, StringVector edges, double arrivalPos, double duration, double speed, string stopID) {
    libsumoPINVOKE.Person_appendWalkingStage__SWIG_0(personID, StringVector.getCPtr(edges), arrivalPos, duration, speed, stopID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void appendWalkingStage(string personID, StringVector edges, double arrivalPos, double duration, double speed) {
    libsumoPINVOKE.Person_appendWalkingStage__SWIG_1(personID, StringVector.getCPtr(edges), arrivalPos, duration, speed);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void appendWalkingStage(string personID, StringVector edges, double arrivalPos, double duration) {
    libsumoPINVOKE.Person_appendWalkingStage__SWIG_2(personID, StringVector.getCPtr(edges), arrivalPos, duration);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void appendWalkingStage(string personID, StringVector edges, double arrivalPos) {
    libsumoPINVOKE.Person_appendWalkingStage__SWIG_3(personID, StringVector.getCPtr(edges), arrivalPos);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void appendDrivingStage(string personID, string toEdge, string lines, string stopID) {
    libsumoPINVOKE.Person_appendDrivingStage__SWIG_0(personID, toEdge, lines, stopID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void appendDrivingStage(string personID, string toEdge, string lines) {
    libsumoPINVOKE.Person_appendDrivingStage__SWIG_1(personID, toEdge, lines);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void removeStage(string personID, int nextStageIndex) {
    libsumoPINVOKE.Person_removeStage(personID, nextStageIndex);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void rerouteTraveltime(string personID) {
    libsumoPINVOKE.Person_rerouteTraveltime(personID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void moveTo(string personID, string laneID, double pos, double posLat) {
    libsumoPINVOKE.Person_moveTo__SWIG_0(personID, laneID, pos, posLat);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void moveTo(string personID, string laneID, double pos) {
    libsumoPINVOKE.Person_moveTo__SWIG_1(personID, laneID, pos);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void moveToXY(string personID, string edgeID, double x, double y, double angle, int keepRoute, double matchThreshold) {
    libsumoPINVOKE.Person_moveToXY__SWIG_0(personID, edgeID, x, y, angle, keepRoute, matchThreshold);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void moveToXY(string personID, string edgeID, double x, double y, double angle, int keepRoute) {
    libsumoPINVOKE.Person_moveToXY__SWIG_1(personID, edgeID, x, y, angle, keepRoute);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void moveToXY(string personID, string edgeID, double x, double y, double angle) {
    libsumoPINVOKE.Person_moveToXY__SWIG_2(personID, edgeID, x, y, angle);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void moveToXY(string personID, string edgeID, double x, double y) {
    libsumoPINVOKE.Person_moveToXY__SWIG_3(personID, edgeID, x, y);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void remove(string personID, char reason) {
    libsumoPINVOKE.Person_remove__SWIG_0(personID, reason);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void remove(string personID) {
    libsumoPINVOKE.Person_remove__SWIG_1(personID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setSpeed(string personID, double speed) {
    libsumoPINVOKE.Person_setSpeed(personID, speed);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setType(string personID, string typeID) {
    libsumoPINVOKE.Person_setType(personID, typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setLength(string typeID, double length) {
    libsumoPINVOKE.Person_setLength(typeID, length);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setMaxSpeed(string typeID, double speed) {
    libsumoPINVOKE.Person_setMaxSpeed(typeID, speed);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setVehicleClass(string typeID, string clazz) {
    libsumoPINVOKE.Person_setVehicleClass(typeID, clazz);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setSpeedFactor(string typeID, double factor) {
    libsumoPINVOKE.Person_setSpeedFactor(typeID, factor);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setAccel(string typeID, double accel) {
    libsumoPINVOKE.Person_setAccel(typeID, accel);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setDecel(string typeID, double decel) {
    libsumoPINVOKE.Person_setDecel(typeID, decel);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setEmergencyDecel(string typeID, double decel) {
    libsumoPINVOKE.Person_setEmergencyDecel(typeID, decel);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setApparentDecel(string typeID, double decel) {
    libsumoPINVOKE.Person_setApparentDecel(typeID, decel);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setImperfection(string typeID, double imperfection) {
    libsumoPINVOKE.Person_setImperfection(typeID, imperfection);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setTau(string typeID, double tau) {
    libsumoPINVOKE.Person_setTau(typeID, tau);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setEmissionClass(string typeID, string clazz) {
    libsumoPINVOKE.Person_setEmissionClass(typeID, clazz);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setShapeClass(string typeID, string shapeClass) {
    libsumoPINVOKE.Person_setShapeClass(typeID, shapeClass);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setWidth(string typeID, double width) {
    libsumoPINVOKE.Person_setWidth(typeID, width);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setHeight(string typeID, double height) {
    libsumoPINVOKE.Person_setHeight(typeID, height);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setMass(string typeID, double mass) {
    libsumoPINVOKE.Person_setMass(typeID, mass);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setColor(string typeID, TraCIColor color) {
    libsumoPINVOKE.Person_setColor(typeID, TraCIColor.getCPtr(color));
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setMinGap(string typeID, double minGap) {
    libsumoPINVOKE.Person_setMinGap(typeID, minGap);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setMinGapLat(string typeID, double minGapLat) {
    libsumoPINVOKE.Person_setMinGapLat(typeID, minGapLat);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setMaxSpeedLat(string typeID, double speed) {
    libsumoPINVOKE.Person_setMaxSpeedLat(typeID, speed);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setLateralAlignment(string typeID, string latAlignment) {
    libsumoPINVOKE.Person_setLateralAlignment(typeID, latAlignment);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setActionStepLength(string typeID, double actionStepLength, bool resetActionOffset) {
    libsumoPINVOKE.Person_setActionStepLength__SWIG_0(typeID, actionStepLength, resetActionOffset);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setActionStepLength(string typeID, double actionStepLength) {
    libsumoPINVOKE.Person_setActionStepLength__SWIG_1(typeID, actionStepLength);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setBoardingDuration(string typeID, double boardingDuration) {
    libsumoPINVOKE.Person_setBoardingDuration(typeID, boardingDuration);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setImpatience(string typeID, double impatience) {
    libsumoPINVOKE.Person_setImpatience(typeID, impatience);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(string objectID, IntVector varIDs, double begin, double end, TraCIResults parameters) {
    libsumoPINVOKE.Person_subscribe__SWIG_0(objectID, IntVector.getCPtr(varIDs), begin, end, TraCIResults.getCPtr(parameters));
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(string objectID, IntVector varIDs, double begin, double end) {
    libsumoPINVOKE.Person_subscribe__SWIG_1(objectID, IntVector.getCPtr(varIDs), begin, end);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(string objectID, IntVector varIDs, double begin) {
    libsumoPINVOKE.Person_subscribe__SWIG_2(objectID, IntVector.getCPtr(varIDs), begin);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(string objectID, IntVector varIDs) {
    libsumoPINVOKE.Person_subscribe__SWIG_3(objectID, IntVector.getCPtr(varIDs));
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(string objectID) {
    libsumoPINVOKE.Person_subscribe__SWIG_4(objectID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void unsubscribe(string objectID) {
    libsumoPINVOKE.Person_unsubscribe(objectID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeContext(string objectID, int domain, double dist, IntVector varIDs, double begin, double end, TraCIResults parameters) {
    libsumoPINVOKE.Person_subscribeContext__SWIG_0(objectID, domain, dist, IntVector.getCPtr(varIDs), begin, end, TraCIResults.getCPtr(parameters));
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeContext(string objectID, int domain, double dist, IntVector varIDs, double begin, double end) {
    libsumoPINVOKE.Person_subscribeContext__SWIG_1(objectID, domain, dist, IntVector.getCPtr(varIDs), begin, end);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeContext(string objectID, int domain, double dist, IntVector varIDs, double begin) {
    libsumoPINVOKE.Person_subscribeContext__SWIG_2(objectID, domain, dist, IntVector.getCPtr(varIDs), begin);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeContext(string objectID, int domain, double dist, IntVector varIDs) {
    libsumoPINVOKE.Person_subscribeContext__SWIG_3(objectID, domain, dist, IntVector.getCPtr(varIDs));
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeContext(string objectID, int domain, double dist) {
    libsumoPINVOKE.Person_subscribeContext__SWIG_4(objectID, domain, dist);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void unsubscribeContext(string objectID, int domain, double dist) {
    libsumoPINVOKE.Person_unsubscribeContext(objectID, domain, dist);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SubscriptionResults getAllSubscriptionResults() {
    SubscriptionResults ret = new SubscriptionResults(libsumoPINVOKE.Person_getAllSubscriptionResults(), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIResults getSubscriptionResults(string objectID) {
    TraCIResults ret = new TraCIResults(libsumoPINVOKE.Person_getSubscriptionResults(objectID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ContextSubscriptionResults getAllContextSubscriptionResults() {
    ContextSubscriptionResults ret = new ContextSubscriptionResults(libsumoPINVOKE.Person_getAllContextSubscriptionResults(), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SubscriptionResults getContextSubscriptionResults(string objectID) {
    SubscriptionResults ret = new SubscriptionResults(libsumoPINVOKE.Person_getContextSubscriptionResults(objectID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void subscribeParameterWithKey(string objectID, string key, double beginTime, double endTime) {
    libsumoPINVOKE.Person_subscribeParameterWithKey__SWIG_0(objectID, key, beginTime, endTime);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeParameterWithKey(string objectID, string key, double beginTime) {
    libsumoPINVOKE.Person_subscribeParameterWithKey__SWIG_1(objectID, key, beginTime);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeParameterWithKey(string objectID, string key) {
    libsumoPINVOKE.Person_subscribeParameterWithKey__SWIG_2(objectID, key);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int DOMAIN_ID {
    get {
      int ret = libsumoPINVOKE.Person_DOMAIN_ID_get();
      if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int domainID() {
    int ret = libsumoPINVOKE.Person_domainID();
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
