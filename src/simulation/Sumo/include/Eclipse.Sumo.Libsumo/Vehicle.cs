//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Eclipse.Sumo.Libsumo {

public class Vehicle : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Vehicle(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Vehicle obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Vehicle obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Vehicle() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libsumoPINVOKE.delete_Vehicle(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static double getSpeed(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getSpeed(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getLateralSpeed(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getLateralSpeed(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getAcceleration(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getAcceleration(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getSpeedWithoutTraCI(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getSpeedWithoutTraCI(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIPosition getPosition(string vehID, bool includeZ) {
    TraCIPosition ret = new TraCIPosition(libsumoPINVOKE.Vehicle_getPosition__SWIG_0(vehID, includeZ), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIPosition getPosition(string vehID) {
    TraCIPosition ret = new TraCIPosition(libsumoPINVOKE.Vehicle_getPosition__SWIG_1(vehID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIPosition getPosition3D(string vehID) {
    TraCIPosition ret = new TraCIPosition(libsumoPINVOKE.Vehicle_getPosition3D(vehID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getAngle(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getAngle(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getSlope(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getSlope(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getRoadID(string vehID) {
    string ret = libsumoPINVOKE.Vehicle_getRoadID(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getLaneID(string vehID) {
    string ret = libsumoPINVOKE.Vehicle_getLaneID(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getLaneIndex(string vehID) {
    int ret = libsumoPINVOKE.Vehicle_getLaneIndex(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getSegmentID(string vehID) {
    string ret = libsumoPINVOKE.Vehicle_getSegmentID(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getSegmentIndex(string vehID) {
    int ret = libsumoPINVOKE.Vehicle_getSegmentIndex(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getTypeID(string vehID) {
    string ret = libsumoPINVOKE.Vehicle_getTypeID(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getRouteID(string vehID) {
    string ret = libsumoPINVOKE.Vehicle_getRouteID(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getDeparture(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getDeparture(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getDepartDelay(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getDepartDelay(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getRouteIndex(string vehID) {
    int ret = libsumoPINVOKE.Vehicle_getRouteIndex(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getLanePosition(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getLanePosition(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getLateralLanePosition(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getLateralLanePosition(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getCO2Emission(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getCO2Emission(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getCOEmission(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getCOEmission(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getHCEmission(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getHCEmission(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getPMxEmission(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getPMxEmission(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getNOxEmission(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getNOxEmission(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getFuelConsumption(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getFuelConsumption(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getNoiseEmission(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getNoiseEmission(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getElectricityConsumption(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getElectricityConsumption(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getPersonNumber(string vehID) {
    int ret = libsumoPINVOKE.Vehicle_getPersonNumber(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getPersonIDList(string vehID) {
    StringVector ret = new StringVector(libsumoPINVOKE.Vehicle_getPersonIDList(vehID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringDoublePair getLeader(string vehID, double dist) {
    StringDoublePair ret = new StringDoublePair(libsumoPINVOKE.Vehicle_getLeader__SWIG_0(vehID, dist), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringDoublePair getLeader(string vehID) {
    StringDoublePair ret = new StringDoublePair(libsumoPINVOKE.Vehicle_getLeader__SWIG_1(vehID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringDoublePair getFollower(string vehID, double dist) {
    StringDoublePair ret = new StringDoublePair(libsumoPINVOKE.Vehicle_getFollower__SWIG_0(vehID, dist), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringDoublePair getFollower(string vehID) {
    StringDoublePair ret = new StringDoublePair(libsumoPINVOKE.Vehicle_getFollower__SWIG_1(vehID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIJunctionFoeVector getJunctionFoes(string vehID, double dist) {
    TraCIJunctionFoeVector ret = new TraCIJunctionFoeVector(libsumoPINVOKE.Vehicle_getJunctionFoes__SWIG_0(vehID, dist), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIJunctionFoeVector getJunctionFoes(string vehID) {
    TraCIJunctionFoeVector ret = new TraCIJunctionFoeVector(libsumoPINVOKE.Vehicle_getJunctionFoes__SWIG_1(vehID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getWaitingTime(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getWaitingTime(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getAccumulatedWaitingTime(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getAccumulatedWaitingTime(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getAdaptedTraveltime(string vehID, double time, string edgeID) {
    double ret = libsumoPINVOKE.Vehicle_getAdaptedTraveltime(vehID, time, edgeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getEffort(string vehID, double time, string edgeID) {
    double ret = libsumoPINVOKE.Vehicle_getEffort(vehID, time, edgeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isRouteValid(string vehID) {
    bool ret = libsumoPINVOKE.Vehicle_isRouteValid(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getRoute(string vehID) {
    StringVector ret = new StringVector(libsumoPINVOKE.Vehicle_getRoute(vehID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getSignals(string vehID) {
    int ret = libsumoPINVOKE.Vehicle_getSignals(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIBestLanesDataVector getBestLanes(string vehID) {
    TraCIBestLanesDataVector ret = new TraCIBestLanesDataVector(libsumoPINVOKE.Vehicle_getBestLanes(vehID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCINextTLSVector getNextTLS(string vehID) {
    TraCINextTLSVector ret = new TraCINextTLSVector(libsumoPINVOKE.Vehicle_getNextTLS(vehID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCINextStopDataVector getNextStops(string vehID) {
    TraCINextStopDataVector ret = new TraCINextStopDataVector(libsumoPINVOKE.Vehicle_getNextStops(vehID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIConnectionVector getNextLinks(string vehID) {
    TraCIConnectionVector ret = new TraCIConnectionVector(libsumoPINVOKE.Vehicle_getNextLinks(vehID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCINextStopDataVector getStops(string vehID, int limit) {
    TraCINextStopDataVector ret = new TraCINextStopDataVector(libsumoPINVOKE.Vehicle_getStops__SWIG_0(vehID, limit), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCINextStopDataVector getStops(string vehID) {
    TraCINextStopDataVector ret = new TraCINextStopDataVector(libsumoPINVOKE.Vehicle_getStops__SWIG_1(vehID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getStopState(string vehID) {
    int ret = libsumoPINVOKE.Vehicle_getStopState(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getStopParameter(string vehID, int nextStopIndex, string param, bool customParam) {
    string ret = libsumoPINVOKE.Vehicle_getStopParameter__SWIG_0(vehID, nextStopIndex, param, customParam);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getStopParameter(string vehID, int nextStopIndex, string param) {
    string ret = libsumoPINVOKE.Vehicle_getStopParameter__SWIG_1(vehID, nextStopIndex, param);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getDistance(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getDistance(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getDrivingDistance(string vehID, string edgeID, double pos, int laneIndex) {
    double ret = libsumoPINVOKE.Vehicle_getDrivingDistance__SWIG_0(vehID, edgeID, pos, laneIndex);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getDrivingDistance(string vehID, string edgeID, double pos) {
    double ret = libsumoPINVOKE.Vehicle_getDrivingDistance__SWIG_1(vehID, edgeID, pos);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getDrivingDistance2D(string vehID, double x, double y) {
    double ret = libsumoPINVOKE.Vehicle_getDrivingDistance2D(vehID, x, y);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getAllowedSpeed(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getAllowedSpeed(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getSpeedMode(string vehID) {
    int ret = libsumoPINVOKE.Vehicle_getSpeedMode(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getLaneChangeMode(string vehID) {
    int ret = libsumoPINVOKE.Vehicle_getLaneChangeMode(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getRoutingMode(string vehID) {
    int ret = libsumoPINVOKE.Vehicle_getRoutingMode(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getLine(string vehID) {
    string ret = libsumoPINVOKE.Vehicle_getLine(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getVia(string vehID) {
    StringVector ret = new StringVector(libsumoPINVOKE.Vehicle_getVia(vehID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IntIntPair getLaneChangeState(string vehID, int direction) {
    IntIntPair ret = new IntIntPair(libsumoPINVOKE.Vehicle_getLaneChangeState(vehID, direction), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getLastActionTime(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getLastActionTime(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringDoublePairVector getNeighbors(string vehID, int mode) {
    StringDoublePairVector ret = new StringDoublePairVector(libsumoPINVOKE.Vehicle_getNeighbors(vehID, mode), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getFollowSpeed(string vehID, double speed, double gap, double leaderSpeed, double leaderMaxDecel, string leaderID) {
    double ret = libsumoPINVOKE.Vehicle_getFollowSpeed__SWIG_0(vehID, speed, gap, leaderSpeed, leaderMaxDecel, leaderID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getFollowSpeed(string vehID, double speed, double gap, double leaderSpeed, double leaderMaxDecel) {
    double ret = libsumoPINVOKE.Vehicle_getFollowSpeed__SWIG_1(vehID, speed, gap, leaderSpeed, leaderMaxDecel);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getSecureGap(string vehID, double speed, double leaderSpeed, double leaderMaxDecel, string leaderID) {
    double ret = libsumoPINVOKE.Vehicle_getSecureGap__SWIG_0(vehID, speed, leaderSpeed, leaderMaxDecel, leaderID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getSecureGap(string vehID, double speed, double leaderSpeed, double leaderMaxDecel) {
    double ret = libsumoPINVOKE.Vehicle_getSecureGap__SWIG_1(vehID, speed, leaderSpeed, leaderMaxDecel);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getStopSpeed(string vehID, double speed, double gap) {
    double ret = libsumoPINVOKE.Vehicle_getStopSpeed(vehID, speed, gap);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getStopDelay(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getStopDelay(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getStopArrivalDelay(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getStopArrivalDelay(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getTimeLoss(string vehID) {
    double ret = libsumoPINVOKE.Vehicle_getTimeLoss(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getTaxiFleet(int taxiState) {
    StringVector ret = new StringVector(libsumoPINVOKE.Vehicle_getTaxiFleet__SWIG_0(taxiState), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getTaxiFleet() {
    StringVector ret = new StringVector(libsumoPINVOKE.Vehicle_getTaxiFleet__SWIG_1(), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getLoadedIDList() {
    StringVector ret = new StringVector(libsumoPINVOKE.Vehicle_getLoadedIDList(), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getTeleportingIDList() {
    StringVector ret = new StringVector(libsumoPINVOKE.Vehicle_getTeleportingIDList(), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getIDList() {
    StringVector ret = new StringVector(libsumoPINVOKE.Vehicle_getIDList(), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getIDCount() {
    int ret = libsumoPINVOKE.Vehicle_getIDCount();
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getParameter(string objectID, string key) {
    string ret = libsumoPINVOKE.Vehicle_getParameter(objectID, key);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringStringPair getParameterWithKey(string objectID, string key) {
    StringStringPair ret = new StringStringPair(libsumoPINVOKE.Vehicle_getParameterWithKey(objectID, key), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setParameter(string objectID, string key, string value) {
    libsumoPINVOKE.Vehicle_setParameter(objectID, key, value);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double getLength(string typeID) {
    double ret = libsumoPINVOKE.Vehicle_getLength(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getMaxSpeed(string typeID) {
    double ret = libsumoPINVOKE.Vehicle_getMaxSpeed(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getVehicleClass(string typeID) {
    string ret = libsumoPINVOKE.Vehicle_getVehicleClass(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getSpeedFactor(string typeID) {
    double ret = libsumoPINVOKE.Vehicle_getSpeedFactor(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getAccel(string typeID) {
    double ret = libsumoPINVOKE.Vehicle_getAccel(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getDecel(string typeID) {
    double ret = libsumoPINVOKE.Vehicle_getDecel(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getEmergencyDecel(string typeID) {
    double ret = libsumoPINVOKE.Vehicle_getEmergencyDecel(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getApparentDecel(string typeID) {
    double ret = libsumoPINVOKE.Vehicle_getApparentDecel(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getImperfection(string typeID) {
    double ret = libsumoPINVOKE.Vehicle_getImperfection(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getTau(string typeID) {
    double ret = libsumoPINVOKE.Vehicle_getTau(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getEmissionClass(string typeID) {
    string ret = libsumoPINVOKE.Vehicle_getEmissionClass(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getShapeClass(string typeID) {
    string ret = libsumoPINVOKE.Vehicle_getShapeClass(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getMinGap(string typeID) {
    double ret = libsumoPINVOKE.Vehicle_getMinGap(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getWidth(string typeID) {
    double ret = libsumoPINVOKE.Vehicle_getWidth(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getHeight(string typeID) {
    double ret = libsumoPINVOKE.Vehicle_getHeight(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getMass(string typeID) {
    double ret = libsumoPINVOKE.Vehicle_getMass(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIColor getColor(string typeID) {
    TraCIColor ret = new TraCIColor(libsumoPINVOKE.Vehicle_getColor(typeID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getMinGapLat(string typeID) {
    double ret = libsumoPINVOKE.Vehicle_getMinGapLat(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getMaxSpeedLat(string typeID) {
    double ret = libsumoPINVOKE.Vehicle_getMaxSpeedLat(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getLateralAlignment(string typeID) {
    string ret = libsumoPINVOKE.Vehicle_getLateralAlignment(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getPersonCapacity(string typeID) {
    int ret = libsumoPINVOKE.Vehicle_getPersonCapacity(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getActionStepLength(string typeID) {
    double ret = libsumoPINVOKE.Vehicle_getActionStepLength(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getSpeedDeviation(string typeID) {
    double ret = libsumoPINVOKE.Vehicle_getSpeedDeviation(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getBoardingDuration(string typeID) {
    double ret = libsumoPINVOKE.Vehicle_getBoardingDuration(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getImpatience(string typeID) {
    double ret = libsumoPINVOKE.Vehicle_getImpatience(typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setStop(string vehID, string edgeID, double pos, int laneIndex, double duration, int flags, double startPos, double until) {
    libsumoPINVOKE.Vehicle_setStop__SWIG_0(vehID, edgeID, pos, laneIndex, duration, flags, startPos, until);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setStop(string vehID, string edgeID, double pos, int laneIndex, double duration, int flags, double startPos) {
    libsumoPINVOKE.Vehicle_setStop__SWIG_1(vehID, edgeID, pos, laneIndex, duration, flags, startPos);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setStop(string vehID, string edgeID, double pos, int laneIndex, double duration, int flags) {
    libsumoPINVOKE.Vehicle_setStop__SWIG_2(vehID, edgeID, pos, laneIndex, duration, flags);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setStop(string vehID, string edgeID, double pos, int laneIndex, double duration) {
    libsumoPINVOKE.Vehicle_setStop__SWIG_3(vehID, edgeID, pos, laneIndex, duration);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setStop(string vehID, string edgeID, double pos, int laneIndex) {
    libsumoPINVOKE.Vehicle_setStop__SWIG_4(vehID, edgeID, pos, laneIndex);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setStop(string vehID, string edgeID, double pos) {
    libsumoPINVOKE.Vehicle_setStop__SWIG_5(vehID, edgeID, pos);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setStop(string vehID, string edgeID) {
    libsumoPINVOKE.Vehicle_setStop__SWIG_6(vehID, edgeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void replaceStop(string vehID, int nextStopIndex, string edgeID, double pos, int laneIndex, double duration, int flags, double startPos, double until, int teleport) {
    libsumoPINVOKE.Vehicle_replaceStop__SWIG_0(vehID, nextStopIndex, edgeID, pos, laneIndex, duration, flags, startPos, until, teleport);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void replaceStop(string vehID, int nextStopIndex, string edgeID, double pos, int laneIndex, double duration, int flags, double startPos, double until) {
    libsumoPINVOKE.Vehicle_replaceStop__SWIG_1(vehID, nextStopIndex, edgeID, pos, laneIndex, duration, flags, startPos, until);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void replaceStop(string vehID, int nextStopIndex, string edgeID, double pos, int laneIndex, double duration, int flags, double startPos) {
    libsumoPINVOKE.Vehicle_replaceStop__SWIG_2(vehID, nextStopIndex, edgeID, pos, laneIndex, duration, flags, startPos);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void replaceStop(string vehID, int nextStopIndex, string edgeID, double pos, int laneIndex, double duration, int flags) {
    libsumoPINVOKE.Vehicle_replaceStop__SWIG_3(vehID, nextStopIndex, edgeID, pos, laneIndex, duration, flags);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void replaceStop(string vehID, int nextStopIndex, string edgeID, double pos, int laneIndex, double duration) {
    libsumoPINVOKE.Vehicle_replaceStop__SWIG_4(vehID, nextStopIndex, edgeID, pos, laneIndex, duration);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void replaceStop(string vehID, int nextStopIndex, string edgeID, double pos, int laneIndex) {
    libsumoPINVOKE.Vehicle_replaceStop__SWIG_5(vehID, nextStopIndex, edgeID, pos, laneIndex);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void replaceStop(string vehID, int nextStopIndex, string edgeID, double pos) {
    libsumoPINVOKE.Vehicle_replaceStop__SWIG_6(vehID, nextStopIndex, edgeID, pos);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void replaceStop(string vehID, int nextStopIndex, string edgeID) {
    libsumoPINVOKE.Vehicle_replaceStop__SWIG_7(vehID, nextStopIndex, edgeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void insertStop(string vehID, int nextStopIndex, string edgeID, double pos, int laneIndex, double duration, int flags, double startPos, double until, int teleport) {
    libsumoPINVOKE.Vehicle_insertStop__SWIG_0(vehID, nextStopIndex, edgeID, pos, laneIndex, duration, flags, startPos, until, teleport);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void insertStop(string vehID, int nextStopIndex, string edgeID, double pos, int laneIndex, double duration, int flags, double startPos, double until) {
    libsumoPINVOKE.Vehicle_insertStop__SWIG_1(vehID, nextStopIndex, edgeID, pos, laneIndex, duration, flags, startPos, until);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void insertStop(string vehID, int nextStopIndex, string edgeID, double pos, int laneIndex, double duration, int flags, double startPos) {
    libsumoPINVOKE.Vehicle_insertStop__SWIG_2(vehID, nextStopIndex, edgeID, pos, laneIndex, duration, flags, startPos);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void insertStop(string vehID, int nextStopIndex, string edgeID, double pos, int laneIndex, double duration, int flags) {
    libsumoPINVOKE.Vehicle_insertStop__SWIG_3(vehID, nextStopIndex, edgeID, pos, laneIndex, duration, flags);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void insertStop(string vehID, int nextStopIndex, string edgeID, double pos, int laneIndex, double duration) {
    libsumoPINVOKE.Vehicle_insertStop__SWIG_4(vehID, nextStopIndex, edgeID, pos, laneIndex, duration);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void insertStop(string vehID, int nextStopIndex, string edgeID, double pos, int laneIndex) {
    libsumoPINVOKE.Vehicle_insertStop__SWIG_5(vehID, nextStopIndex, edgeID, pos, laneIndex);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void insertStop(string vehID, int nextStopIndex, string edgeID, double pos) {
    libsumoPINVOKE.Vehicle_insertStop__SWIG_6(vehID, nextStopIndex, edgeID, pos);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void insertStop(string vehID, int nextStopIndex, string edgeID) {
    libsumoPINVOKE.Vehicle_insertStop__SWIG_7(vehID, nextStopIndex, edgeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setStopParameter(string vehID, int nextStopIndex, string param, string value, bool customParam) {
    libsumoPINVOKE.Vehicle_setStopParameter__SWIG_0(vehID, nextStopIndex, param, value, customParam);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setStopParameter(string vehID, int nextStopIndex, string param, string value) {
    libsumoPINVOKE.Vehicle_setStopParameter__SWIG_1(vehID, nextStopIndex, param, value);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void rerouteParkingArea(string vehID, string parkingAreaID) {
    libsumoPINVOKE.Vehicle_rerouteParkingArea(vehID, parkingAreaID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void resume(string vehID) {
    libsumoPINVOKE.Vehicle_resume(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void add(string vehID, string routeID, string typeID, string depart, string departLane, string departPos, string departSpeed, string arrivalLane, string arrivalPos, string arrivalSpeed, string fromTaz, string toTaz, string line, int personCapacity, int personNumber) {
    libsumoPINVOKE.Vehicle_add__SWIG_0(vehID, routeID, typeID, depart, departLane, departPos, departSpeed, arrivalLane, arrivalPos, arrivalSpeed, fromTaz, toTaz, line, personCapacity, personNumber);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void add(string vehID, string routeID, string typeID, string depart, string departLane, string departPos, string departSpeed, string arrivalLane, string arrivalPos, string arrivalSpeed, string fromTaz, string toTaz, string line, int personCapacity) {
    libsumoPINVOKE.Vehicle_add__SWIG_1(vehID, routeID, typeID, depart, departLane, departPos, departSpeed, arrivalLane, arrivalPos, arrivalSpeed, fromTaz, toTaz, line, personCapacity);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void add(string vehID, string routeID, string typeID, string depart, string departLane, string departPos, string departSpeed, string arrivalLane, string arrivalPos, string arrivalSpeed, string fromTaz, string toTaz, string line) {
    libsumoPINVOKE.Vehicle_add__SWIG_2(vehID, routeID, typeID, depart, departLane, departPos, departSpeed, arrivalLane, arrivalPos, arrivalSpeed, fromTaz, toTaz, line);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void add(string vehID, string routeID, string typeID, string depart, string departLane, string departPos, string departSpeed, string arrivalLane, string arrivalPos, string arrivalSpeed, string fromTaz, string toTaz) {
    libsumoPINVOKE.Vehicle_add__SWIG_3(vehID, routeID, typeID, depart, departLane, departPos, departSpeed, arrivalLane, arrivalPos, arrivalSpeed, fromTaz, toTaz);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void add(string vehID, string routeID, string typeID, string depart, string departLane, string departPos, string departSpeed, string arrivalLane, string arrivalPos, string arrivalSpeed, string fromTaz) {
    libsumoPINVOKE.Vehicle_add__SWIG_4(vehID, routeID, typeID, depart, departLane, departPos, departSpeed, arrivalLane, arrivalPos, arrivalSpeed, fromTaz);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void add(string vehID, string routeID, string typeID, string depart, string departLane, string departPos, string departSpeed, string arrivalLane, string arrivalPos, string arrivalSpeed) {
    libsumoPINVOKE.Vehicle_add__SWIG_5(vehID, routeID, typeID, depart, departLane, departPos, departSpeed, arrivalLane, arrivalPos, arrivalSpeed);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void add(string vehID, string routeID, string typeID, string depart, string departLane, string departPos, string departSpeed, string arrivalLane, string arrivalPos) {
    libsumoPINVOKE.Vehicle_add__SWIG_6(vehID, routeID, typeID, depart, departLane, departPos, departSpeed, arrivalLane, arrivalPos);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void add(string vehID, string routeID, string typeID, string depart, string departLane, string departPos, string departSpeed, string arrivalLane) {
    libsumoPINVOKE.Vehicle_add__SWIG_7(vehID, routeID, typeID, depart, departLane, departPos, departSpeed, arrivalLane);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void add(string vehID, string routeID, string typeID, string depart, string departLane, string departPos, string departSpeed) {
    libsumoPINVOKE.Vehicle_add__SWIG_8(vehID, routeID, typeID, depart, departLane, departPos, departSpeed);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void add(string vehID, string routeID, string typeID, string depart, string departLane, string departPos) {
    libsumoPINVOKE.Vehicle_add__SWIG_9(vehID, routeID, typeID, depart, departLane, departPos);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void add(string vehID, string routeID, string typeID, string depart, string departLane) {
    libsumoPINVOKE.Vehicle_add__SWIG_10(vehID, routeID, typeID, depart, departLane);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void add(string vehID, string routeID, string typeID, string depart) {
    libsumoPINVOKE.Vehicle_add__SWIG_11(vehID, routeID, typeID, depart);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void add(string vehID, string routeID, string typeID) {
    libsumoPINVOKE.Vehicle_add__SWIG_12(vehID, routeID, typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void add(string vehID, string routeID) {
    libsumoPINVOKE.Vehicle_add__SWIG_13(vehID, routeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void changeTarget(string vehID, string edgeID) {
    libsumoPINVOKE.Vehicle_changeTarget(vehID, edgeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void changeLane(string vehID, int laneIndex, double duration) {
    libsumoPINVOKE.Vehicle_changeLane(vehID, laneIndex, duration);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void changeLaneRelative(string vehID, int indexOffset, double duration) {
    libsumoPINVOKE.Vehicle_changeLaneRelative(vehID, indexOffset, duration);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void changeSublane(string vehID, double latDist) {
    libsumoPINVOKE.Vehicle_changeSublane(vehID, latDist);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void slowDown(string vehID, double speed, double duration) {
    libsumoPINVOKE.Vehicle_slowDown(vehID, speed, duration);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void openGap(string vehID, double newTimeHeadway, double newSpaceHeadway, double duration, double changeRate, double maxDecel, string referenceVehID) {
    libsumoPINVOKE.Vehicle_openGap__SWIG_0(vehID, newTimeHeadway, newSpaceHeadway, duration, changeRate, maxDecel, referenceVehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void openGap(string vehID, double newTimeHeadway, double newSpaceHeadway, double duration, double changeRate, double maxDecel) {
    libsumoPINVOKE.Vehicle_openGap__SWIG_1(vehID, newTimeHeadway, newSpaceHeadway, duration, changeRate, maxDecel);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void openGap(string vehID, double newTimeHeadway, double newSpaceHeadway, double duration, double changeRate) {
    libsumoPINVOKE.Vehicle_openGap__SWIG_2(vehID, newTimeHeadway, newSpaceHeadway, duration, changeRate);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void deactivateGapControl(string vehID) {
    libsumoPINVOKE.Vehicle_deactivateGapControl(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void requestToC(string vehID, double leadTime) {
    libsumoPINVOKE.Vehicle_requestToC(vehID, leadTime);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setSpeed(string vehID, double speed) {
    libsumoPINVOKE.Vehicle_setSpeed(vehID, speed);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setAcceleration(string vehID, double acceleration, double duration) {
    libsumoPINVOKE.Vehicle_setAcceleration(vehID, acceleration, duration);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setPreviousSpeed(string vehID, double prevSpeed, double prevAcceleration) {
    libsumoPINVOKE.Vehicle_setPreviousSpeed__SWIG_0(vehID, prevSpeed, prevAcceleration);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setPreviousSpeed(string vehID, double prevSpeed) {
    libsumoPINVOKE.Vehicle_setPreviousSpeed__SWIG_1(vehID, prevSpeed);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setSpeedMode(string vehID, int speedMode) {
    libsumoPINVOKE.Vehicle_setSpeedMode(vehID, speedMode);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setLaneChangeMode(string vehID, int laneChangeMode) {
    libsumoPINVOKE.Vehicle_setLaneChangeMode(vehID, laneChangeMode);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setRoutingMode(string vehID, int routingMode) {
    libsumoPINVOKE.Vehicle_setRoutingMode(vehID, routingMode);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setType(string vehID, string typeID) {
    libsumoPINVOKE.Vehicle_setType(vehID, typeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setRouteID(string vehID, string routeID) {
    libsumoPINVOKE.Vehicle_setRouteID(vehID, routeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setRoute(string vehID, string edgeID) {
    libsumoPINVOKE.Vehicle_setRoute__SWIG_0(vehID, edgeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setRoute(string vehID, StringVector edgeIDs) {
    libsumoPINVOKE.Vehicle_setRoute__SWIG_1(vehID, StringVector.getCPtr(edgeIDs));
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setLateralLanePosition(string vehID, double posLat) {
    libsumoPINVOKE.Vehicle_setLateralLanePosition(vehID, posLat);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void updateBestLanes(string vehID) {
    libsumoPINVOKE.Vehicle_updateBestLanes(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setAdaptedTraveltime(string vehID, string edgeID, double time, double begSeconds, double endSeconds) {
    libsumoPINVOKE.Vehicle_setAdaptedTraveltime__SWIG_0(vehID, edgeID, time, begSeconds, endSeconds);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setAdaptedTraveltime(string vehID, string edgeID, double time, double begSeconds) {
    libsumoPINVOKE.Vehicle_setAdaptedTraveltime__SWIG_1(vehID, edgeID, time, begSeconds);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setAdaptedTraveltime(string vehID, string edgeID, double time) {
    libsumoPINVOKE.Vehicle_setAdaptedTraveltime__SWIG_2(vehID, edgeID, time);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setAdaptedTraveltime(string vehID, string edgeID) {
    libsumoPINVOKE.Vehicle_setAdaptedTraveltime__SWIG_3(vehID, edgeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setEffort(string vehID, string edgeID, double effort, double begSeconds, double endSeconds) {
    libsumoPINVOKE.Vehicle_setEffort__SWIG_0(vehID, edgeID, effort, begSeconds, endSeconds);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setEffort(string vehID, string edgeID, double effort, double begSeconds) {
    libsumoPINVOKE.Vehicle_setEffort__SWIG_1(vehID, edgeID, effort, begSeconds);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setEffort(string vehID, string edgeID, double effort) {
    libsumoPINVOKE.Vehicle_setEffort__SWIG_2(vehID, edgeID, effort);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setEffort(string vehID, string edgeID) {
    libsumoPINVOKE.Vehicle_setEffort__SWIG_3(vehID, edgeID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void rerouteTraveltime(string vehID, bool currentTravelTimes) {
    libsumoPINVOKE.Vehicle_rerouteTraveltime__SWIG_0(vehID, currentTravelTimes);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void rerouteTraveltime(string vehID) {
    libsumoPINVOKE.Vehicle_rerouteTraveltime__SWIG_1(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void rerouteEffort(string vehID) {
    libsumoPINVOKE.Vehicle_rerouteEffort(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setSignals(string vehID, int signals) {
    libsumoPINVOKE.Vehicle_setSignals(vehID, signals);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void moveTo(string vehID, string laneID, double pos, int reason) {
    libsumoPINVOKE.Vehicle_moveTo__SWIG_0(vehID, laneID, pos, reason);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void moveTo(string vehID, string laneID, double pos) {
    libsumoPINVOKE.Vehicle_moveTo__SWIG_1(vehID, laneID, pos);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void moveToXY(string vehID, string edgeID, int laneIndex, double x, double y, double angle, int keepRoute, double matchThreshold) {
    libsumoPINVOKE.Vehicle_moveToXY__SWIG_0(vehID, edgeID, laneIndex, x, y, angle, keepRoute, matchThreshold);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void moveToXY(string vehID, string edgeID, int laneIndex, double x, double y, double angle, int keepRoute) {
    libsumoPINVOKE.Vehicle_moveToXY__SWIG_1(vehID, edgeID, laneIndex, x, y, angle, keepRoute);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void moveToXY(string vehID, string edgeID, int laneIndex, double x, double y, double angle) {
    libsumoPINVOKE.Vehicle_moveToXY__SWIG_2(vehID, edgeID, laneIndex, x, y, angle);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void moveToXY(string vehID, string edgeID, int laneIndex, double x, double y) {
    libsumoPINVOKE.Vehicle_moveToXY__SWIG_3(vehID, edgeID, laneIndex, x, y);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void remove(string vehID, char reason) {
    libsumoPINVOKE.Vehicle_remove__SWIG_0(vehID, reason);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void remove(string vehID) {
    libsumoPINVOKE.Vehicle_remove__SWIG_1(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setLine(string vehID, string line) {
    libsumoPINVOKE.Vehicle_setLine(vehID, line);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setVia(string vehID, StringVector edgeList) {
    libsumoPINVOKE.Vehicle_setVia(vehID, StringVector.getCPtr(edgeList));
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void highlight(string vehID, TraCIColor col, double size, int alphaMax, double duration, int type) {
    libsumoPINVOKE.Vehicle_highlight__SWIG_0(vehID, TraCIColor.getCPtr(col), size, alphaMax, duration, type);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void highlight(string vehID, TraCIColor col, double size, int alphaMax, double duration) {
    libsumoPINVOKE.Vehicle_highlight__SWIG_1(vehID, TraCIColor.getCPtr(col), size, alphaMax, duration);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void highlight(string vehID, TraCIColor col, double size, int alphaMax) {
    libsumoPINVOKE.Vehicle_highlight__SWIG_2(vehID, TraCIColor.getCPtr(col), size, alphaMax);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void highlight(string vehID, TraCIColor col, double size) {
    libsumoPINVOKE.Vehicle_highlight__SWIG_3(vehID, TraCIColor.getCPtr(col), size);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void highlight(string vehID, TraCIColor col) {
    libsumoPINVOKE.Vehicle_highlight__SWIG_4(vehID, TraCIColor.getCPtr(col));
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void highlight(string vehID) {
    libsumoPINVOKE.Vehicle_highlight__SWIG_5(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void dispatchTaxi(string vehID, StringVector reservations) {
    libsumoPINVOKE.Vehicle_dispatchTaxi(vehID, StringVector.getCPtr(reservations));
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setLength(string typeID, double length) {
    libsumoPINVOKE.Vehicle_setLength(typeID, length);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setMaxSpeed(string typeID, double speed) {
    libsumoPINVOKE.Vehicle_setMaxSpeed(typeID, speed);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setVehicleClass(string typeID, string clazz) {
    libsumoPINVOKE.Vehicle_setVehicleClass(typeID, clazz);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setSpeedFactor(string typeID, double factor) {
    libsumoPINVOKE.Vehicle_setSpeedFactor(typeID, factor);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setAccel(string typeID, double accel) {
    libsumoPINVOKE.Vehicle_setAccel(typeID, accel);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setDecel(string typeID, double decel) {
    libsumoPINVOKE.Vehicle_setDecel(typeID, decel);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setEmergencyDecel(string typeID, double decel) {
    libsumoPINVOKE.Vehicle_setEmergencyDecel(typeID, decel);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setApparentDecel(string typeID, double decel) {
    libsumoPINVOKE.Vehicle_setApparentDecel(typeID, decel);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setImperfection(string typeID, double imperfection) {
    libsumoPINVOKE.Vehicle_setImperfection(typeID, imperfection);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setTau(string typeID, double tau) {
    libsumoPINVOKE.Vehicle_setTau(typeID, tau);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setEmissionClass(string typeID, string clazz) {
    libsumoPINVOKE.Vehicle_setEmissionClass(typeID, clazz);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setShapeClass(string typeID, string shapeClass) {
    libsumoPINVOKE.Vehicle_setShapeClass(typeID, shapeClass);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setWidth(string typeID, double width) {
    libsumoPINVOKE.Vehicle_setWidth(typeID, width);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setHeight(string typeID, double height) {
    libsumoPINVOKE.Vehicle_setHeight(typeID, height);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setMass(string typeID, double mass) {
    libsumoPINVOKE.Vehicle_setMass(typeID, mass);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setColor(string typeID, TraCIColor color) {
    libsumoPINVOKE.Vehicle_setColor(typeID, TraCIColor.getCPtr(color));
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setMinGap(string typeID, double minGap) {
    libsumoPINVOKE.Vehicle_setMinGap(typeID, minGap);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setMinGapLat(string typeID, double minGapLat) {
    libsumoPINVOKE.Vehicle_setMinGapLat(typeID, minGapLat);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setMaxSpeedLat(string typeID, double speed) {
    libsumoPINVOKE.Vehicle_setMaxSpeedLat(typeID, speed);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setLateralAlignment(string typeID, string latAlignment) {
    libsumoPINVOKE.Vehicle_setLateralAlignment(typeID, latAlignment);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setActionStepLength(string typeID, double actionStepLength, bool resetActionOffset) {
    libsumoPINVOKE.Vehicle_setActionStepLength__SWIG_0(typeID, actionStepLength, resetActionOffset);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setActionStepLength(string typeID, double actionStepLength) {
    libsumoPINVOKE.Vehicle_setActionStepLength__SWIG_1(typeID, actionStepLength);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setBoardingDuration(string typeID, double boardingDuration) {
    libsumoPINVOKE.Vehicle_setBoardingDuration(typeID, boardingDuration);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setImpatience(string typeID, double impatience) {
    libsumoPINVOKE.Vehicle_setImpatience(typeID, impatience);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(string objectID, IntVector varIDs, double begin, double end, TraCIResults parameters) {
    libsumoPINVOKE.Vehicle_subscribe__SWIG_0(objectID, IntVector.getCPtr(varIDs), begin, end, TraCIResults.getCPtr(parameters));
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(string objectID, IntVector varIDs, double begin, double end) {
    libsumoPINVOKE.Vehicle_subscribe__SWIG_1(objectID, IntVector.getCPtr(varIDs), begin, end);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(string objectID, IntVector varIDs, double begin) {
    libsumoPINVOKE.Vehicle_subscribe__SWIG_2(objectID, IntVector.getCPtr(varIDs), begin);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(string objectID, IntVector varIDs) {
    libsumoPINVOKE.Vehicle_subscribe__SWIG_3(objectID, IntVector.getCPtr(varIDs));
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(string objectID) {
    libsumoPINVOKE.Vehicle_subscribe__SWIG_4(objectID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void unsubscribe(string objectID) {
    libsumoPINVOKE.Vehicle_unsubscribe(objectID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeContext(string objectID, int domain, double dist, IntVector varIDs, double begin, double end, TraCIResults parameters) {
    libsumoPINVOKE.Vehicle_subscribeContext__SWIG_0(objectID, domain, dist, IntVector.getCPtr(varIDs), begin, end, TraCIResults.getCPtr(parameters));
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeContext(string objectID, int domain, double dist, IntVector varIDs, double begin, double end) {
    libsumoPINVOKE.Vehicle_subscribeContext__SWIG_1(objectID, domain, dist, IntVector.getCPtr(varIDs), begin, end);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeContext(string objectID, int domain, double dist, IntVector varIDs, double begin) {
    libsumoPINVOKE.Vehicle_subscribeContext__SWIG_2(objectID, domain, dist, IntVector.getCPtr(varIDs), begin);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeContext(string objectID, int domain, double dist, IntVector varIDs) {
    libsumoPINVOKE.Vehicle_subscribeContext__SWIG_3(objectID, domain, dist, IntVector.getCPtr(varIDs));
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeContext(string objectID, int domain, double dist) {
    libsumoPINVOKE.Vehicle_subscribeContext__SWIG_4(objectID, domain, dist);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void unsubscribeContext(string objectID, int domain, double dist) {
    libsumoPINVOKE.Vehicle_unsubscribeContext(objectID, domain, dist);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SubscriptionResults getAllSubscriptionResults() {
    SubscriptionResults ret = new SubscriptionResults(libsumoPINVOKE.Vehicle_getAllSubscriptionResults(), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIResults getSubscriptionResults(string objectID) {
    TraCIResults ret = new TraCIResults(libsumoPINVOKE.Vehicle_getSubscriptionResults(objectID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ContextSubscriptionResults getAllContextSubscriptionResults() {
    ContextSubscriptionResults ret = new ContextSubscriptionResults(libsumoPINVOKE.Vehicle_getAllContextSubscriptionResults(), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SubscriptionResults getContextSubscriptionResults(string objectID) {
    SubscriptionResults ret = new SubscriptionResults(libsumoPINVOKE.Vehicle_getContextSubscriptionResults(objectID), true);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void subscribeParameterWithKey(string objectID, string key, double beginTime, double endTime) {
    libsumoPINVOKE.Vehicle_subscribeParameterWithKey__SWIG_0(objectID, key, beginTime, endTime);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeParameterWithKey(string objectID, string key, double beginTime) {
    libsumoPINVOKE.Vehicle_subscribeParameterWithKey__SWIG_1(objectID, key, beginTime);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeParameterWithKey(string objectID, string key) {
    libsumoPINVOKE.Vehicle_subscribeParameterWithKey__SWIG_2(objectID, key);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int DOMAIN_ID {
    get {
      int ret = libsumoPINVOKE.Vehicle_DOMAIN_ID_get();
      if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int domainID() {
    int ret = libsumoPINVOKE.Vehicle_domainID();
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void subscribeLeader(string vehID, double dist, double begin, double end) {
    libsumoPINVOKE.Vehicle_subscribeLeader__SWIG_0(vehID, dist, begin, end);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeLeader(string vehID, double dist, double begin) {
    libsumoPINVOKE.Vehicle_subscribeLeader__SWIG_1(vehID, dist, begin);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeLeader(string vehID, double dist) {
    libsumoPINVOKE.Vehicle_subscribeLeader__SWIG_2(vehID, dist);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeLeader(string vehID) {
    libsumoPINVOKE.Vehicle_subscribeLeader__SWIG_3(vehID);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterLanes(IntVector lanes, bool noOpposite, double downstreamDist, double upstreamDist) {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterLanes__SWIG_0(IntVector.getCPtr(lanes), noOpposite, downstreamDist, upstreamDist);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterLanes(IntVector lanes, bool noOpposite, double downstreamDist) {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterLanes__SWIG_1(IntVector.getCPtr(lanes), noOpposite, downstreamDist);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterLanes(IntVector lanes, bool noOpposite) {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterLanes__SWIG_2(IntVector.getCPtr(lanes), noOpposite);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterLanes(IntVector lanes) {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterLanes__SWIG_3(IntVector.getCPtr(lanes));
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterNoOpposite() {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterNoOpposite();
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterDownstreamDistance(double dist) {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterDownstreamDistance(dist);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterUpstreamDistance(double dist) {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterUpstreamDistance(dist);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterCFManeuver(double downstreamDist, double upstreamDist) {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterCFManeuver__SWIG_0(downstreamDist, upstreamDist);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterCFManeuver(double downstreamDist) {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterCFManeuver__SWIG_1(downstreamDist);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterCFManeuver() {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterCFManeuver__SWIG_2();
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterLCManeuver(int direction, bool noOpposite, double downstreamDist, double upstreamDist) {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterLCManeuver__SWIG_0(direction, noOpposite, downstreamDist, upstreamDist);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterLCManeuver(int direction, bool noOpposite, double downstreamDist) {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterLCManeuver__SWIG_1(direction, noOpposite, downstreamDist);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterLCManeuver(int direction, bool noOpposite) {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterLCManeuver__SWIG_2(direction, noOpposite);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterLCManeuver(int direction) {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterLCManeuver__SWIG_3(direction);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterLCManeuver() {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterLCManeuver__SWIG_4();
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterLeadFollow(IntVector lanes) {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterLeadFollow(IntVector.getCPtr(lanes));
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterTurn(double downstreamDist, double foeDistToJunction) {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterTurn__SWIG_0(downstreamDist, foeDistToJunction);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterTurn(double downstreamDist) {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterTurn__SWIG_1(downstreamDist);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterTurn() {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterTurn__SWIG_2();
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterVClass(StringVector vClasses) {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterVClass(StringVector.getCPtr(vClasses));
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterVType(StringVector vTypes) {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterVType(StringVector.getCPtr(vTypes));
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterFieldOfVision(double openingAngle) {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterFieldOfVision(openingAngle);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterLateralDistance(double lateralDist, double downstreamDist, double upstreamDist) {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterLateralDistance__SWIG_0(lateralDist, downstreamDist, upstreamDist);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterLateralDistance(double lateralDist, double downstreamDist) {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterLateralDistance__SWIG_1(lateralDist, downstreamDist);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addSubscriptionFilterLateralDistance(double lateralDist) {
    libsumoPINVOKE.Vehicle_addSubscriptionFilterLateralDistance__SWIG_2(lateralDist);
    if (libsumoPINVOKE.SWIGPendingException.Pending) throw libsumoPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
